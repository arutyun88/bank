package com.neoflex.producer.service;import com.neoflex.producer.model.BankAccount;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.web.client.ResourceAccessException;import org.springframework.web.client.RestTemplate;import java.net.URI;import java.util.ArrayList;import java.util.List;@Servicepublic class KafkaProducerService {    private final static List<BankAccount> RESULT_LIST_READ = new ArrayList<>();    private static String URL;    public KafkaProducerService(@Value(value = "${producer.service.url}") String url) {        URL = url;    }    public static List<BankAccount> getService() {        RestTemplate restTemplate = new RestTemplate();        try {            BankAccount[] bankAccounts = restTemplate.getForObject(new URI(URL), BankAccount[].class);            if (bankAccounts != null) {                for (BankAccount bankAccount : bankAccounts) {                    if (!findBankAccountByAccountNumber(bankAccount.getAccountNumber())) {                        if (findMatch(bankAccount.getFirstName()) &&                                findMatch(bankAccount.getLastName()) &&                                findMatch(bankAccount.getPatronymic())) {                            RESULT_LIST_READ.add(new BankAccount(                                    bankAccount.getUuid(),                                    bankAccount.getFirstName(),                                    bankAccount.getLastName(),                                    bankAccount.getPatronymic(),                                    bankAccount.getAccountNumber()                            ));                        }                    }                }            }        } catch (ResourceAccessException exception) {            System.out.println("Server is not found");            exception.printStackTrace();        } catch (Exception exception) {            System.out.println("Other exception");        }        return RESULT_LIST_READ;    }    private static boolean findMatch(String value) {        return !(value.charAt(0) == 'Ð˜');    }    private static boolean findBankAccountByAccountNumber(long accountNumber) {        for (BankAccount bankAccount : RESULT_LIST_READ) {            if (accountNumber == bankAccount.getAccountNumber()) {                return true;            }        }        return false;    }}